/*
An n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive).

Given an n x n integer matrix matrix, return true if the matrix is valid. Otherwise, return false.

 

Example 1:


Input: matrix = [[1,2,3],[3,1,2],[2,3,1]]
Output: true
Explanation: In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.
Hence, we return true.
Example 2:


Input: matrix = [[1,1,1],[1,2,3],[1,2,3]]
Output: false
Explanation: In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.
Hence, we return false.
*/

#include <algorithm>
#include <string>
class Solution {
public:
    bool checkValid(vector<vector<int>>& matrix) {
        vector<int> nums;
        vector<int> numsV;
        for(int i = 0; i < matrix.size(); i++){
            for(int j = 0; j < matrix.size(); j++){
                nums.push_back(matrix[i][j]);
                numsV.push_back(matrix[j][i]);
            }

            sort(nums.begin(), nums.end());
            sort(numsV.begin(), numsV.end());

            for(int k = 0; k < matrix.size(); k++){
                if(nums.at(k) != k+1 || numsV.at(k) != k+1){
                    return false;
                }
            }
            cout << endl;
            nums.resize(0);
            numsV.resize(0); 
        }
        return true;
    }
};
