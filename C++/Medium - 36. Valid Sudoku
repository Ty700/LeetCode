/*
36. Valid Sudoku

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.

*/

#include <vector>
#include <algorithm>
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int y = 0;
        int count = 0;
        vector<char> numsH;
        vector<char> numsV;
        
        //Checks horizontal & vertical
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] != '.'){ //Horizontal nums
                    numsH.push_back(board[i][j]);
                }
                if(board[j][i] != '.'){ // Vertical Lines
                    numsV.push_back(board[j][i]);
                }
            }
            //sorts each vector 
            sort(numsH.begin(), numsH.end());
            sort(numsV.begin(), numsV.end());

            //Checks horizonal dupes
            for(int h = numsH.size() - 1; h > 0; h--){
                if(numsH.at(h) == numsH.at(h-1)){
                    return false;
                }
            }

            //Checks vertical
            for(int v = numsV.size() - 1; v > 0; v--){
                if(numsV.at(v) == numsV.at(v-1)){
                    return false;
                }
            }
            numsH.resize(0);
            numsV.resize(0);
        }


        //Checks 3x3 - Resusing numsH vector to free memory
        while(count < 3){
            for(int i = 0; i < 9; i++){
                //Inside column now
                for(int j = 0; j < 3; j++){
                    if(board[i][j+y] != '.'){ //Skips blanks since they can't be dupes
                        numsH.push_back(board[i][j+y]);
                    }
                    if((i == 2 && j == 2) || (i == 5 && j == 2) || (i == 8 && j == 2)){
                        //Inside each 3x3 now
                        sort(numsH.begin(), numsH.end());
                        for(int k = numsH.size() - 1; k > 0; k--){
                            if(numsH[k] == numsH[k-1]){
                                cout << numsH[k] << " == " << numsH[k-1] << " " << endl;
                                return false;
                            }
                        }
                        cout << endl << "End of one 3x3" << endl;
                        numsH.resize(0);
                    }
                }
                cout << endl;
            }
            y += 3;
            count++;
        }
        return true;
    }
};
